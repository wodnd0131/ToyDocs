
import { useState } from 'react';
import { 
  GitBranch, 
  Plus, 
  Filter, 
  Search, 
  AlertCircle, 
  CheckCircle, 
  Clock, 
  User,
  Calendar,
  MessageSquare,
  Zap
} from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';

const Issues = () => {
  const [selectedStatus, setSelectedStatus] = useState('all');
  const [selectedAssignee, setSelectedAssignee] = useState('all');

  const issues = [
    {
      id: 123,
      title: "로그인 페이지 구현",
      description: "OAuth 2.0 기반 소셜 로그인 구현",
      status: "in-progress",
      priority: "high",
      assignee: "임현우",
      assigneeAvatar: "임현",
      createdAt: "2024-07-02",
      comments: 5,
      timeTracked: "4h 30m",
      autoGenerated: true,
      source: "슬랙 회의록 #12"
    },
    {
      id: 124,
      title: "API 연동 오류 수정",
      description: "사용자 정보 조회 API 500 에러 해결",
      status: "review",
      priority: "critical",
      assignee: "김개발",
      assigneeAvatar: "김개",
      createdAt: "2024-07-01",
      comments: 12,
      timeTracked: "6h 15m",
      autoGenerated: false,
      source: "수동 생성"
    },
    {
      id: 125,
      title: "UI 컴포넌트 리팩토링",
      description: "재사용 가능한 버튼 컴포넌트 개선",
      status: "todo",
      priority: "medium",
      assignee: "박디자인",
      assigneeAvatar: "박디",
      createdAt: "2024-06-30",
      comments: 3,
      timeTracked: "2h 00m",
      autoGenerated: true,
      source: "자동 할당"
    },
    {
      id: 126,
      title: "데이터베이스 성능 최적화",
      description: "쿼리 최적화 및 인덱스 설정",
      status: "done",
      priority: "high",
      assignee: "이백엔드",
      assigneeAvatar: "이백",
      createdAt: "2024-06-28",
      comments: 8,
      timeTracked: "8h 45m",
      autoGenerated: false,
      source: "수동 생성"
    },
    {
      id: 127,
      title: "모바일 반응형 대응",
      description: "태블릿, 모바일 화면 대응 및 터치 최적화",
      status: "todo",
      priority: "medium",
      assignee: "박디자인",
      assigneeAvatar: "박디",
      createdAt: "2024-06-27",
      comments: 2,
      timeTracked: "1h 30m",
      autoGenerated: true,
      source: "AI 추천"
    }
  ];

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'todo': return <Clock className="w-4 h-4 text-gray-500" />;
      case 'in-progress': return <AlertCircle className="w-4 h-4 text-orange-500" />;
      case 'review': return <User className="w-4 h-4 text-blue-500" />;
      case 'done': return <CheckCircle className="w-4 h-4 text-green-500" />;
      default: return <Clock className="w-4 h-4 text-gray-500" />;
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'todo': return '할 일';
      case 'in-progress': return '진행 중';
      case 'review': return '검토 중';
      case 'done': return '완료';
      default: return status;
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'critical': return 'bg-red-100 text-red-800';
      case 'high': return 'bg-orange-100 text-orange-800';
      case 'medium': return 'bg-blue-100 text-blue-800';
      case 'low': return 'bg-gray-100 text-gray-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const filteredIssues = issues.filter(issue => {
    if (selectedStatus !== 'all' && issue.status !== selectedStatus) return false;
    if (selectedAssignee !== 'all' && issue.assignee !== selectedAssignee) return false;
    return true;
  });

  const statusCounts = {
    all: issues.length,
    todo: issues.filter(i => i.status === 'todo').length,
    'in-progress': issues.filter(i => i.status === 'in-progress').length,
    review: issues.filter(i => i.status === 'review').length,
    done: issues.filter(i => i.status === 'done').length
  };

  return (
    <div className="p-6 space-y-6 bg-github-dark min-h-screen">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold text-white flex items-center">
            <GitBranch className="w-8 h-8 mr-3 text-toss-blue" />
            이슈 관리
          </h1>
          <p className="text-gray-400 mt-2">
            프로젝트 이슈를 체계적으로 관리하고 팀원에게 자동으로 할당하세요
          </p>
        </div>
        <Button className="bg-toss-blue hover:bg-toss-darkBlue text-white">
          <Plus className="w-4 h-4 mr-2" />
          새 이슈 생성
        </Button>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
        {Object.entries(statusCounts).map(([status, count]) => (
          <Card 
            key={status}
            className={`bg-github-darkSecondary border-github-border cursor-pointer transition-colors ${
              selectedStatus === status ? 'border-toss-blue' : 'hover:border-gray-600'
            }`}
            onClick={() => setSelectedStatus(status)}
          >
            <CardContent className="p-4 text-center">
              <div className="flex items-center justify-center mb-2">
                {getStatusIcon(status)}
              </div>
              <div className="text-2xl font-bold text-white">{count}</div>
              <div className="text-xs text-gray-400 capitalize">
                {status === 'all' ? '전체' : getStatusText(status)}
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Filters */}
      <Card className="bg-github-darkSecondary border-github-border">
        <CardContent className="p-4">
          <div className="flex flex-col md:flex-row gap-4">
            <div className="flex-1">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                <Input
                  placeholder="이슈 제목, 설명으로 검색..."
                  className="pl-10 bg-github-dark border-github-border text-white placeholder-gray-400"
                />
              </div>
            </div>
            
            <Select value={selectedAssignee} onValueChange={setSelectedAssignee}>
              <SelectTrigger className="w-full md:w-48 bg-github-dark border-github-border text-white">
                <SelectValue placeholder="담당자 필터" />
              </SelectTrigger>
              <SelectContent className="bg-github-darkSecondary border-github-border">
                <SelectItem value="all">모든 담당자</SelectItem>
                <SelectItem value="임현우">임현우</SelectItem>
                <SelectItem value="김개발">김개발</SelectItem>
                <SelectItem value="박디자인">박디자인</SelectItem>
                <SelectItem value="이백엔드">이백엔드</SelectItem>
              </SelectContent>
            </Select>

            <Button variant="outline" className="border-github-border text-gray-300 hover:text-white">
              <Filter className="w-4 h-4 mr-2" />
              고급 필터
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Issues List */}
      <div className="space-y-4">
        {filteredIssues.map((issue) => (
          <Card key={issue.id} className="bg-github-darkSecondary border-github-border hover:border-toss-blue transition-colors cursor-pointer">
            <CardContent className="p-6">
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <div className="flex items-center space-x-3 mb-2">
                    <span className="text-gray-400 font-mono text-sm">#{issue.id}</span>
                    <h3 className="text-lg font-medium text-white">{issue.title}</h3>
                    {issue.autoGenerated && (
                      <Badge className="bg-toss-blue text-white">
                        <Zap className="w-3 h-3 mr-1" />
                        AI Generated
                      </Badge>
                    )}
                  </div>
                  
                  <p className="text-gray-400 text-sm mb-3">{issue.description}</p>
                  
                  <div className="flex flex-wrap items-center gap-4 text-sm">
                    <div className="flex items-center space-x-1">
                      {getStatusIcon(issue.status)}
                      <span className="text-gray-300">{getStatusText(issue.status)}</span>
                    </div>
                    
                    <Badge className={getPriorityColor(issue.priority)}>
                      {issue.priority}
                    </Badge>
                    
                    <div className="flex items-center space-x-1 text-gray-400">
                      <Calendar className="w-4 h-4" />
                      <span>{issue.createdAt}</span>
                    </div>
                    
                    <div className="flex items-center space-x-1 text-gray-400">
                      <MessageSquare className="w-4 h-4" />
                      <span>{issue.comments}</span>
                    </div>
                    
                    <div className="flex items-center space-x-1 text-gray-400">
                      <Clock className="w-4 h-4" />
                      <span>{issue.timeTracked}</span>
                    </div>
                  </div>
                  
                  {issue.autoGenerated && (
                    <div className="mt-2 text-xs text-toss-blue">
                      📄 출처: {issue.source}
                    </div>
                  )}
                </div>
                
                <div className="flex items-center space-x-3">
                  <div className="text-right">
                    <div className="text-xs text-gray-400 mb-1">담당자</div>
                    <div className="flex items-center space-x-2">
                      <Avatar className="w-8 h-8">
                        <AvatarFallback className="bg-toss-blue text-white text-xs">
                          {issue.assigneeAvatar}
                        </AvatarFallback>
                      </Avatar>
                      <span className="text-sm text-white">{issue.assignee}</span>
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Smart Assignment Demo */}
      <Card className="bg-gradient-to-r from-toss-blue/10 to-purple-600/10 border-toss-blue/30">
        <CardHeader>
          <CardTitle className="text-white flex items-center">
            <Zap className="w-5 h-5 mr-2 text-yellow-500" />
            스마트 이슈 할당 시스템
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="text-center p-4 bg-github-darkSecondary rounded-lg">
              <div className="w-12 h-12 bg-toss-blue/20 rounded-full flex items-center justify-center mx-auto mb-3">
                <User className="w-6 h-6 text-toss-blue" />
              </div>
              <h3 className="font-medium text-white mb-2">워크로드 분석</h3>
              <p className="text-sm text-gray-400">팀원별 현재 작업량과 스킬셋을 고려하여 최적의 담당자를 추천</p>
            </div>
            
            <div className="text-center p-4 bg-github-darkSecondary rounded-lg">
              <div className="w-12 h-12 bg-purple-500/20 rounded-full flex items-center justify-center mx-auto mb-3">
                <MessageSquare className="w-6 h-6 text-purple-500" />
              </div>
              <h3 className="font-medium text-white mb-2">컨텍스트 이해</h3>
              <p className="text-sm text-gray-400">슬랙 대화나 회의록에서 자동으로 이슈를 생성하고 적절한 담당자 배정</p>
            </div>
            
            <div className="text-center p-4 bg-github-darkSecondary rounded-lg">
              <div className="w-12 h-12 bg-green-500/20 rounded-full flex items-center justify-center mx-auto mb-3">
                <CheckCircle className="w-6 h-6 text-green-500" />
              </div>
              <h3 className="font-medium text-white mb-2">자동 우선순위</h3>
              <p className="text-sm text-gray-400">프로젝트 마감일과 의존성을 분석하여 이슈 우선순위를 자동 설정</p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default Issues;
